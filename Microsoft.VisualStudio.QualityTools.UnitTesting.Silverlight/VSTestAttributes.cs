// (c) Copyright Microsoft Corporation.
// This source is subject to [###LICENSE_NAME###].
// Please see [###LICENSE_LINK###] for details.
// All other rights reserved.
//
// <autogenerated /> 
// The Visual Studio metadata is not subjected to same source analysis

//*****************************************************************************
// VSTestAttributes.cs
//
// VS Attributes for unit testing
//
// Copyright(c) Microsoft Corporation, 2003
//*****************************************************************************

// Silverlight test framework specific changes
// DeploymentItem throws NotSupportedException

namespace Microsoft.VisualStudio.TestTools.UnitTesting
{
    using System;

    /// <summary>
    /// Marks a test class.
    /// </summary>
    [AttributeUsage(AttributeTargets.Class, AllowMultiple=false)]
    public sealed class TestClassAttribute : Attribute
    {
        /// <summary>
        /// Initializes a new test class attribute.
        /// </summary>
        public TestClassAttribute()
        {
        }
    }

    /// <summary>
    /// Marks a test method.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple=false)]
    public /*sealed */ class TestMethodAttribute : Attribute
    {
        /// <summary>
        /// Initializes a new TestMethodAttribute.
        /// </summary>
        public TestMethodAttribute() {}
    }

    /// <summary>
    /// A method marker called before a test method runs.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple=false)]
    public sealed class TestInitializeAttribute : Attribute
    {
        /// <summary>
        /// Initializes a new TestInitializeAttribute.
        /// </summary>
        public TestInitializeAttribute()
        {
        }
    }

    /// <summary>
    /// A method marker called after a test method runs.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple=false)]
    public sealed class TestCleanupAttribute : Attribute
    {
        /// <summary>
        /// Initializes a new TestCleanupAttribute.
        /// </summary>
        public TestCleanupAttribute()
        {
        }
    }

    /// <summary>
    /// Ignores a unit test.
    /// </summary>
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = false)]
	public sealed class IgnoreAttribute : Attribute
	{
        /// <summary>
        /// Initializes a new IgnoreAttribute.
        /// </summary>
		public IgnoreAttribute()
		{
		}
	}

    /// <summary>
    /// The ExpectedExceptionAttribute.
    /// </summary>
	[AttributeUsage(AttributeTargets.Method, AllowMultiple=false)]
    public sealed class ExpectedExceptionAttribute : Attribute
    {
        private Type m_exceptionType;
        private string m_message;

        /// <summary>
        /// Initializes the ExpectedExceptionAttribute.
        /// </summary>
        /// <param name="exceptionType">The exception type.</param>
        public ExpectedExceptionAttribute (Type exceptionType) : this (exceptionType, string.Empty)
        {
        }

        /// <summary>
        /// Initializes the ExpectedExceptionAttribute.
        /// </summary>
        /// <param name="exceptionType">The exception type.</param>
        /// <param name="message">The message.</param>
        public ExpectedExceptionAttribute (Type exceptionType, string message)
        {
			System.Diagnostics.Debug.Assert(exceptionType != null);
			System.Diagnostics.Debug.Assert(message != null);

            m_exceptionType = exceptionType;
            m_message       = message;
        }

        /// <summary>
        /// Gets the exception type.
        /// </summary>
        public Type ExceptionType
        {
            get {return m_exceptionType;}
        }

        /// <summary>
        /// Gets the message.
        /// </summary>
        public string Message
        {
            get {return m_message;}
        }
    }

    /// <summary>
    /// The test property attribute.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    public sealed class TestPropertyAttribute : Attribute
    {
        string m_name = string.Empty;
        string m_value= string.Empty;
        /// <summary>
        /// Gets the name.
        /// </summary>
        public string Name
        {
            get { return m_name; }
        }

        /// <summary>
        /// Gets the value.
        /// </summary>
        public string Value
        {
            get { return m_value; }
        }

        /// <summary>
        /// Initializes the TestPropertyAttribute.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        public TestPropertyAttribute(string name , string value)
        {
            // NOTE : DONT THROW EXCEPTIONS FROM HERE IT WILL CRASH GetCustomAttributes() call
            m_name = name;
            m_value = value;
        }
    }

    /// <summary>
    /// The ClassInitializeAttribute.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public sealed class ClassInitializeAttribute : Attribute
    {
        /// <summary>
        /// Initializes the ClassInitializeAttribute.
        /// </summary>
        public ClassInitializeAttribute()
        {
        }
    }
    /// <summary>
    /// The ClassCleanupAttribute.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method , AllowMultiple = false)]
    public sealed class ClassCleanupAttribute : Attribute
    {
        /// <summary>
        /// Initializes the ClassCleanupAttribute.
        /// </summary>
        public ClassCleanupAttribute()
        {
        }
    }

    /// <summary>
    /// The AssemblyInitializeAttribute.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public sealed class AssemblyInitializeAttribute : Attribute
    {
        /// <summary>
        /// Initializes the AssemblyInitializeAttribute.
        /// </summary>
        public AssemblyInitializeAttribute()
        {
        }
    }

    /// <summary>
    /// The AssemblyCleanupAttribute.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public sealed class AssemblyCleanupAttribute : Attribute
    {
        /// <summary>
        /// Initializes the AssemblyCleanupAttribute.
        /// </summary>
        public AssemblyCleanupAttribute()
        {
        }
    }

    /// <summary>
    /// Description of the test.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public sealed class DescriptionAttribute : Attribute
    {
        /// <summary>
        /// Initializes the DescriptionAttribute.
        /// </summary>
        /// <param name="description">The description.</param>
        public DescriptionAttribute(string description)
        {
            m_description = description;
        }

        /// <summary>
        /// Gets the description.
        /// </summary>
        public string Description
        {
            get { return m_description; }
        }

        private string m_description;
    }

    /// <summary>
    /// The OwnerAttribute.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public sealed class OwnerAttribute : Attribute
    {
        /// <summary>
        /// Initializes the OwnerAttribute.
        /// </summary>
        /// <param name="owner">The owner.</param>
        public OwnerAttribute(string owner)
        {
            m_owner = owner;
        }

        /// <summary>
        /// Gets the owner.
        /// </summary>
        public string Owner
        {
            get { return m_owner; }
        }

        private string m_owner;
    }

    /// <summary>
    /// CSS Project Structure URI.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public sealed class CssProjectStructureAttribute : Attribute
    {
        /// <summary>
        /// Initializes the CSS Project Structure URI.
        /// </summary>
        /// <param name="cssProjectStructure">The structure.</param>
        public CssProjectStructureAttribute(string cssProjectStructure)
        {
            m_cssProjectStructure = cssProjectStructure;
        }

        /// <summary>
        /// Gets the property structure.
        /// </summary>
        public string CssProjectStructure
        {
            get { return m_cssProjectStructure; }
        }

        private string m_cssProjectStructure;
    }


    /// <summary>
    /// CSS Iteration URI
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public sealed class CssIterationAttribute : Attribute
    {
        /// <summary>
        /// Initializes the CssIterationAttribute.
        /// </summary>
        /// <param name="cssIteration">The parameter.</param>
        public CssIterationAttribute(string cssIteration)
        {
            m_cssIteration = cssIteration;
        }

        /// <summary>
        /// Gets the CssIteration.
        /// </summary>
        public string CssIteration
        {
            get { return m_cssIteration; }
        }

        private string m_cssIteration;
    }

    /// <summary>
    /// Priority attribute; used to specify the priority of a unit test.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public sealed class PriorityAttribute : Attribute
    {
        /// <summary>
        /// Initializes the PriorityAttribute.
        /// </summary>
        /// <param name="priority">The priority.</param>
        public PriorityAttribute(int priority)
        {
            m_priority = priority;
        }

        /// <summary>
        /// Gets the Priority.
        /// </summary>
        public int Priority
        {
            get { return m_priority; }
        }

        private int m_priority;
    }

    /// <summary>
    /// Timeout attribute; used to specify the timeout of a unit test.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public sealed class TimeoutAttribute : Attribute
    {
        /// <summary>
        /// Initializes the TimeoutAttribute.
        /// </summary>
        /// <param name="timeout"></param>
        public TimeoutAttribute(int timeout)
        {
            m_timeout = timeout;
        }

        /// <summary>
        /// Gets the Timeout.
        /// </summary>
        public int Timeout
        {
            get { return m_timeout; }
        }

        private int m_timeout;
    }

    /// <summary>
    /// WorkItem attribute; used to specify a work item associated with this test.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    public sealed class WorkItemAttribute : Attribute
    {
        /// <summary>
        /// Initializes the WorkItemAttribute.
        /// </summary>
        /// <param name="id"></param>
        public WorkItemAttribute(int id)
        {
            m_id = id;
        }

        /// <summary>
        /// Gets the ID.
        /// </summary>
        public int Id
        {
            get { return m_id; }
        }

        private int m_id;
    }

    /// <summary>
    /// HostType specifies the type of host that this unit test will
    /// run in.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public sealed class HostTypeAttribute : Attribute
    {
        /// <summary>
        /// Initializes the host type attribute.
        /// </summary>
        /// <param name="hostType"></param>
        public HostTypeAttribute(string hostType)
        {
            m_hostType = hostType;
        }

        /// <summary>
        /// Constructor of HostTypeAttribute.
        /// </summary>
        /// <param name="hostType">The type of the host.</param>
        /// <param name="hostData">Custom data for the host adapter.</param>
        public HostTypeAttribute(string hostType, string hostData)
        {
            m_hostType = hostType;
            m_hostData = hostData;
        }

        /// <summary>
        /// Gets the host type.
        /// </summary>
        public string HostType
        {
            get { return m_hostType; }
        }

        /// <summary>
        /// Gets the host data.
        /// </summary>
        public string HostData
        {
            get { return m_hostData; }
        }

        private string m_hostType;

        /// The reason this is string (and not object) is that currently CMI cannot parse arbitrary instances of object and we deprioritized changing CMI.
        private string m_hostData;
    }

    /// <summary>
    /// Used to specify deployment item (file or directory) for per-test deployment.
    /// Can be specified on test class or test method.
    /// Can have multiple instances of the attribute to specify more than one item.
    /// The item path can be absolute or relative, if relative, it is relative to RunConfig.RelativePathRoot.
    /// </summary>
    /// <example>
    /// [DeploymentItem("file1.xml")]
    /// [DeploymentItem("file2.xml", "DataFiles")]
    /// [DeploymentItem("bin\Debug")]
    /// </example>
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]
    public sealed class DeploymentItemAttribute : Attribute
    {
//        private string m_path;
//        private string m_outputDirectory;

        /// <summary>
        /// Initializes DeploymentItemAttribute.
        /// </summary>
        /// <param name="path">The path.</param>
        public DeploymentItemAttribute(string path)
        {
            throw new NotSupportedException("Not currently supported by the Silverlight test framework, please make sure any deployment assets live alongside the test binary.  Contact JWilcox if you have any questions.");
/*
            m_path = path;
            m_outputDirectory = string.Empty;
 * */
        }

        /// <summary>
        /// Initializes DeploymentItemAttribute.
        /// </summary>
        /// <param name="path">The path.</param>
        /// <param name="outputDirectory">The output directory.</param>
        public DeploymentItemAttribute(string path, string outputDirectory)
        {
            throw new NotSupportedException("Not currently supported by the Silverlight test framework, please make sure any deployment assets live alongside the test binary.  Contact JWilcox if you have any questions.");
/*
            m_path = path;
            m_outputDirectory = outputDirectory;
*/
        }
/*
        public string Path
        {
            get { return m_path; }
        }

        public string OutputDirectory
        {
            get { return m_outputDirectory; }
        }
  
 * */}

}
